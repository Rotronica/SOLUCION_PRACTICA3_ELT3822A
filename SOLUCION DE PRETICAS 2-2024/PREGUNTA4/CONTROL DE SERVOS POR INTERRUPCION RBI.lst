CCS PCM C Compiler, Version 5.015, 5967               20-nov.-24 17:45

               Filename:   E:\AUXILIAR\SEM 2-2024 AUX MICRO\SOLUCION DE PRETICAS 2-2024\PREGUNTA2\CONTROL DE SERVOS POR INTERRUPCION RBI.lst

               ROM used:   376 words (5%)
                           Largest free fragment is 2048
               RAM used:   24 (7%) at main() level
                           44 (12%) worst case
               Stack used: 4 locations (1 in main + 3 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   161
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.3
0018:  GOTO   01B
0019:  BTFSC  0B.0
001A:  GOTO   030
001B:  BTFSS  0B.5
001C:  GOTO   01F
001D:  BTFSC  0B.2
001E:  GOTO   033
001F:  MOVF   22,W
0020:  MOVWF  04
0021:  MOVF   23,W
0022:  MOVWF  77
0023:  MOVF   24,W
0024:  MOVWF  78
0025:  MOVF   25,W
0026:  MOVWF  79
0027:  MOVF   26,W
0028:  MOVWF  7A
0029:  MOVF   20,W
002A:  MOVWF  0A
002B:  SWAPF  21,W
002C:  MOVWF  03
002D:  SWAPF  7F,F
002E:  SWAPF  7F,W
002F:  RETFIE
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   12C
0033:  BCF    0A.3
0034:  BCF    0A.4
0035:  GOTO   036
.................... /* 
....................  Autor: Calle Condori Rodrigo 
....................  Ejercicio 2: 
....................   
.................... */ 
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
0095:  MOVLW  10
0096:  MOVWF  46
0097:  CLRF   77
0098:  CLRF   7A
0099:  RRF    43,F
009A:  RRF    42,F
009B:  BTFSS  03.0
009C:  GOTO   0A3
009D:  MOVF   44,W
009E:  ADDWF  77,F
009F:  BTFSC  03.0
00A0:  INCF   7A,F
00A1:  MOVF   45,W
00A2:  ADDWF  7A,F
00A3:  RRF    7A,F
00A4:  RRF    77,F
00A5:  RRF    79,F
00A6:  RRF    78,F
00A7:  DECFSZ 46,F
00A8:  GOTO   099
*
00C2:  CLRF   78
00C3:  CLRF   79
00C4:  CLRF   77
00C5:  CLRF   7A
00C6:  MOVF   45,W
00C7:  BTFSS  03.2
00C8:  GOTO   0CC
00C9:  MOVF   44,W
00CA:  BTFSC  03.2
00CB:  GOTO   0E6
00CC:  MOVLW  10
00CD:  MOVWF  46
00CE:  BCF    03.0
00CF:  RLF    42,F
00D0:  RLF    43,F
00D1:  RLF    77,F
00D2:  RLF    7A,F
00D3:  MOVF   45,W
00D4:  SUBWF  7A,W
00D5:  BTFSS  03.2
00D6:  GOTO   0D9
00D7:  MOVF   44,W
00D8:  SUBWF  77,W
00D9:  BTFSS  03.0
00DA:  GOTO   0E2
00DB:  MOVF   44,W
00DC:  SUBWF  77,F
00DD:  BTFSS  03.0
00DE:  DECF   7A,F
00DF:  MOVF   45,W
00E0:  SUBWF  7A,F
00E1:  BSF    03.0
00E2:  RLF    78,F
00E3:  RLF    79,F
00E4:  DECFSZ 46,F
00E5:  GOTO   0CE
....................  
.................... #list 
....................  
.................... #fuses xt,nowdt,put,noprotect,nolvp 
.................... #use  delay(clock=4M) 
.................... #use standard_io(d) 
.................... //CANALES DEL SERVO 
.................... #DEFINE USE_SERVO_1 
.................... #DEFINE USE_SERVO_2 
.................... #DEFINE USE_SERVO_3 
.................... //PINES A ELEGIR PARA LA SEÑAL PWM 
.................... #DEFINE SERVO_1 PIN_D0 
.................... #DEFINE SERVO_2 PIN_D1 
.................... #DEFINE SERVO_3 PIN_D2 
.................... #define pulsador_1 PIN_B4 
.................... #define pulsador_2 PIN_B5 
.................... #define pulsador_3 PIN_B6 
.................... #define pulsador_4 PIN_B7 
.................... #include <servo_st.c> 
.................... /* #include <servo_st.c> 
.................... * 
....................  
.................... Creada por: Ing. Abiezer Hernandez O. 
.................... Fecha de creacion: 26/05/2020 
.................... Electronica y Circuitos 
.................... */ 
.................... //MODIFICADO POR UNV. Calle Condori Rodrigo 
.................... //               FNI  ETN 
....................  
.................... #define v_min 2                //AJUSTE DEL ANCHO DE PULSO CUANDO ES 0 GRADOS 
.................... #define v_max 10               //AJUSTE PARA LOS DEMAS GRADOS  
....................  
.................... int16 cont_st = 0; 
.................... int8 pwm_st[10]; 
....................  
.................... #INT_TIMER0 
.................... void timer_0() 
.................... { 
.................... cont_st = cont_st + 1; 
*
0036:  MOVLW  01
0037:  ADDWF  27,F
0038:  BTFSC  03.0
0039:  INCF   28,F
.................... if(cont_st > 78)             //AJUSTE DEL PERIIODO 
003A:  MOVF   28,F
003B:  BTFSS  03.2
003C:  GOTO   041
003D:  MOVF   27,W
003E:  SUBLW  4E
003F:  BTFSC  03.0
0040:  GOTO   043
.................... { 
.................... cont_st = 0; 
0041:  CLRF   28
0042:  CLRF   27
.................... } 
.................... #ifdef use_servo_1 
.................... if(cont_st < pwm_st[0]){output_high(servo_1);} else{output_low(servo_1);} 
0043:  MOVF   28,F
0044:  BTFSS  03.2
0045:  GOTO   04F
0046:  MOVF   29,W
0047:  SUBWF  27,W
0048:  BTFSC  03.0
0049:  GOTO   04F
004A:  BSF    03.5
004B:  BCF    08.0
004C:  BCF    03.5
004D:  BSF    08.0
004E:  GOTO   053
004F:  BSF    03.5
0050:  BCF    08.0
0051:  BCF    03.5
0052:  BCF    08.0
.................... #endif 
....................  
.................... #ifdef use_servo_2 
.................... if(cont_st < pwm_st[1]){output_high(servo_2);} else{output_low(servo_2);} 
0053:  MOVF   28,F
0054:  BTFSS  03.2
0055:  GOTO   05F
0056:  MOVF   2A,W
0057:  SUBWF  27,W
0058:  BTFSC  03.0
0059:  GOTO   05F
005A:  BSF    03.5
005B:  BCF    08.1
005C:  BCF    03.5
005D:  BSF    08.1
005E:  GOTO   063
005F:  BSF    03.5
0060:  BCF    08.1
0061:  BCF    03.5
0062:  BCF    08.1
.................... #endif 
....................  
.................... #ifdef use_servo_3 
.................... if(cont_st < pwm_st[2]){output_high(servo_3);} else{output_low(servo_3);} 
0063:  MOVF   28,F
0064:  BTFSS  03.2
0065:  GOTO   06F
0066:  MOVF   2B,W
0067:  SUBWF  27,W
0068:  BTFSC  03.0
0069:  GOTO   06F
006A:  BSF    03.5
006B:  BCF    08.2
006C:  BCF    03.5
006D:  BSF    08.2
006E:  GOTO   073
006F:  BSF    03.5
0070:  BCF    08.2
0071:  BCF    03.5
0072:  BCF    08.2
.................... #endif 
....................  
.................... #ifdef use_servo_4 
.................... if(cont_st < pwm_st[3]){output_high(servo_4);} else{output_low(servo_4);} 
.................... #endif 
....................  
.................... #ifdef use_servo_5 
.................... if(cont_st < pwm_st[4]){output_high(servo_5);} else{output_low(servo_5);} 
.................... #endif 
....................  
.................... #ifdef use_servo_6 
.................... if(cont_st < pwm_st[5]){output_high(servo_6);} else{output_low(servo_6);} 
.................... #endif 
....................  
.................... #ifdef use_servo_7 
.................... if(cont_st < pwm_st[6]){output_high(servo_7);} else{output_low(servo_7);} 
.................... #endif 
....................  
.................... #ifdef use_servo_8 
.................... if(cont_st < pwm_st[7]){output_high(servo_8);} else{output_low(servo_8);} 
.................... #endif 
....................  
.................... #ifdef use_servo_9 
.................... if(cont_st < pwm_st[8]){output_high(servo_9);} else{output_low(servo_9);} 
.................... #endif 
....................  
.................... #ifdef use_servo_10 
.................... if(cont_st < pwm_st[9]){output_high(servo_10);} else{output_low(servo_10);} 
.................... #endif 
0073:  BCF    0B.2
0074:  BCF    0A.3
0075:  BCF    0A.4
0076:  GOTO   01F
.................... } 
....................  
.................... void servo_init() 
.................... { 
.................... setup_timer_0(RTCC_INTERNAL | RTCC_DIV_1); 
*
0153:  BSF    03.5
0154:  MOVF   01,W
0155:  ANDLW  C7
0156:  IORLW  08
0157:  MOVWF  01
.................... enable_interrupts(INT_TIMER0); 
0158:  BCF    03.5
0159:  BSF    0B.5
.................... enable_interrupts(GLOBAL); 
015A:  MOVLW  C0
015B:  IORWF  0B,F
.................... set_timer0(251);             //AJSUTE DE LA INTERRUPCION TMR0 
015C:  MOVLW  FB
015D:  MOVWF  01
015E:  BCF    0A.3
015F:  BCF    0A.4
0160:  GOTO   170 (RETURN)
.................... } 
....................  
.................... long map_int(int16 x, int16 eMin, int16 eMax, int16 sMin, int16 sMax) 
.................... { 
.................... return(x -eMin)*(sMax-sMin)/(eMax-eMin)+sMin; 
*
0077:  MOVF   36,W
0078:  SUBWF  34,W
0079:  MOVWF  3E
007A:  MOVF   35,W
007B:  MOVWF  3F
007C:  MOVF   37,W
007D:  BTFSS  03.0
007E:  INCFSZ 37,W
007F:  SUBWF  3F,F
0080:  MOVF   3A,W
0081:  SUBWF  3C,W
0082:  MOVWF  77
0083:  MOVF   3D,W
0084:  MOVWF  7A
0085:  MOVF   3B,W
0086:  BTFSS  03.0
0087:  INCFSZ 3B,W
0088:  SUBWF  7A,F
0089:  MOVF   77,W
008A:  MOVWF  40
008B:  MOVF   7A,W
008C:  MOVWF  41
008D:  MOVF   3F,W
008E:  MOVWF  43
008F:  MOVF   3E,W
0090:  MOVWF  42
0091:  MOVF   41,W
0092:  MOVWF  45
0093:  MOVF   40,W
0094:  MOVWF  44
*
00A9:  MOVF   79,W
00AA:  MOVWF  3F
00AB:  MOVF   78,W
00AC:  MOVWF  3E
00AD:  MOVF   36,W
00AE:  SUBWF  38,W
00AF:  MOVWF  77
00B0:  MOVF   39,W
00B1:  MOVWF  7A
00B2:  MOVF   37,W
00B3:  BTFSS  03.0
00B4:  INCFSZ 37,W
00B5:  SUBWF  7A,F
00B6:  MOVF   77,W
00B7:  MOVWF  40
00B8:  MOVF   7A,W
00B9:  MOVWF  41
00BA:  MOVF   3F,W
00BB:  MOVWF  43
00BC:  MOVF   3E,W
00BD:  MOVWF  42
00BE:  MOVF   41,W
00BF:  MOVWF  45
00C0:  MOVF   40,W
00C1:  MOVWF  44
*
00E6:  MOVF   79,W
00E7:  MOVWF  3F
00E8:  MOVF   78,W
00E9:  MOVWF  3E
00EA:  MOVF   3A,W
00EB:  ADDWF  78,W
00EC:  MOVWF  78
00ED:  MOVF   79,W
00EE:  MOVWF  7A
00EF:  MOVF   3B,W
00F0:  BTFSC  03.0
00F1:  INCFSZ 3B,W
00F2:  ADDWF  7A,F
00F3:  MOVF   7A,W
00F4:  MOVWF  79
00F5:  RETURN
.................... } 
....................  
.................... #ifdef use_servo_1 
.................... void servo_1_write(int angle1) 
.................... { 
.................... pwm_st[0] = map_int(angle1, 0, 180, v_min, v_max); 
00F6:  CLRF   35
00F7:  MOVF   33,W
00F8:  MOVWF  34
00F9:  CLRF   37
00FA:  CLRF   36
00FB:  CLRF   39
00FC:  MOVLW  B4
00FD:  MOVWF  38
00FE:  CLRF   3B
00FF:  MOVLW  02
0100:  MOVWF  3A
0101:  CLRF   3D
0102:  MOVLW  0A
0103:  MOVWF  3C
0104:  CALL   077
0105:  MOVF   78,W
0106:  MOVWF  29
0107:  RETURN
.................... } 
.................... #endif 
....................  
.................... #ifdef use_servo_2 
.................... void servo_2_write(int angle2) 
.................... { 
.................... pwm_st[1] = map_int(angle2, 0, 180, v_min, v_max); 
0108:  CLRF   35
0109:  MOVF   33,W
010A:  MOVWF  34
010B:  CLRF   37
010C:  CLRF   36
010D:  CLRF   39
010E:  MOVLW  B4
010F:  MOVWF  38
0110:  CLRF   3B
0111:  MOVLW  02
0112:  MOVWF  3A
0113:  CLRF   3D
0114:  MOVLW  0A
0115:  MOVWF  3C
0116:  CALL   077
0117:  MOVF   78,W
0118:  MOVWF  2A
0119:  RETURN
.................... } 
.................... #endif 
....................  
.................... #ifdef use_servo_3 
.................... void servo_3_write(int angle3) 
.................... { 
.................... pwm_st[2] = map_int(angle3, 0, 180, v_min, v_max); 
011A:  CLRF   35
011B:  MOVF   33,W
011C:  MOVWF  34
011D:  CLRF   37
011E:  CLRF   36
011F:  CLRF   39
0120:  MOVLW  B4
0121:  MOVWF  38
0122:  CLRF   3B
0123:  MOVLW  02
0124:  MOVWF  3A
0125:  CLRF   3D
0126:  MOVLW  0A
0127:  MOVWF  3C
0128:  CALL   077
0129:  MOVF   78,W
012A:  MOVWF  2B
012B:  RETURN
.................... } 
.................... #endif 
....................  
.................... #ifdef use_servo_4 
.................... void servo_4_write(int angle4) 
.................... { 
.................... pwm_st[3] = map_int(angle4, 0, 180, v_min, v_max); 
.................... } 
.................... #endif 
....................  
.................... #ifdef use_servo_5 
.................... void servo_5_write(int angle5) 
.................... { 
.................... pwm_st[4] = map_int(angle5, 0, 180, v_min, v_max); 
.................... } 
.................... #endif 
....................  
.................... #ifdef use_servo_6 
.................... void servo_6_write(int angle6) 
.................... { 
.................... pwm_st[5] = map_int(angle6, 0, 180, v_min, v_max); 
.................... } 
.................... #endif 
....................  
.................... #ifdef use_servo_7 
.................... void servo_7_write(int angle7) 
.................... { 
.................... pwm_st[6] = map_int(angle7, 0, 180, v_min, v_max); 
.................... } 
.................... #endif 
....................  
.................... #ifdef use_servo_8 
.................... void servo_8_write(int angle8) 
.................... { 
.................... pwm_st[7] = map_int(angle8, 0, 180, v_min, v_max); 
.................... } 
.................... #endif 
....................  
.................... #ifdef use_servo_9 
.................... void servo_9_write(int angle9) 
.................... { 
.................... pwm_st[8] = map_int(angle9, 0, 180, v_min, v_max); 
.................... } 
.................... #endif 
....................  
.................... #ifdef use_servo_10 
.................... void servo_10_write(int angle10) 
.................... { 
.................... pwm_st[9] = map_int(angle10, 0, 180, v_min, v_max); 
.................... } 
.................... #endif 
....................  
.................... void limpiar(); 
.................... #INT_RB 
.................... void interrupcion_RBI(){ 
....................  if(input(pulsador_1)==0){SERVO_1_WRITE(180);} 
012C:  BSF    03.5
012D:  BSF    06.4
012E:  BCF    03.5
012F:  BTFSC  06.4
0130:  GOTO   134
0131:  MOVLW  B4
0132:  MOVWF  33
0133:  CALL   0F6
....................  if(input(pulsador_2)==0){SERVO_2_WRITE(90);} 
0134:  BSF    03.5
0135:  BSF    06.5
0136:  BCF    03.5
0137:  BTFSC  06.5
0138:  GOTO   13C
0139:  MOVLW  5A
013A:  MOVWF  33
013B:  CALL   108
....................  if(input(pulsador_3)==0){SERVO_3_WRITE(180);} 
013C:  BSF    03.5
013D:  BSF    06.6
013E:  BCF    03.5
013F:  BTFSC  06.6
0140:  GOTO   144
0141:  MOVLW  B4
0142:  MOVWF  33
0143:  CALL   11A
....................  if(input(pulsador_4)==0){limpiar();} 
0144:  BSF    03.5
0145:  BSF    06.7
0146:  BCF    03.5
0147:  BTFSC  06.7
0148:  GOTO   14F
*
014F:  BCF    0B.0
0150:  BCF    0A.3
0151:  BCF    0A.4
0152:  GOTO   01F
.................... } 
.................... void main(){ 
*
0161:  MOVF   03,W
0162:  ANDLW  1F
0163:  MOVWF  03
0164:  CLRF   28
0165:  CLRF   27
0166:  BSF    03.5
0167:  BSF    1F.0
0168:  BSF    1F.1
0169:  BSF    1F.2
016A:  BCF    1F.3
016B:  MOVLW  07
016C:  MOVWF  1C
016D:  BCF    03.7
....................  servo_init(); 
016E:  BCF    03.5
016F:  GOTO   153
....................  port_b_pullups(TRUE); 
0170:  BSF    03.5
0171:  BCF    01.7
....................  enable_interrupts(int_RB); 
0172:  BCF    03.5
0173:  BSF    0B.3
....................  enable_interrupts(GLOBAL); 
0174:  MOVLW  C0
0175:  IORWF  0B,F
....................  while(true){ 
0176:  GOTO   176
....................  } 
.................... } 
.................... void limpiar(){ 
0177:  SLEEP
....................  SERVO_1_WRITE(0); 
*
0149:  CLRF   33
014A:  CALL   0F6
....................  SERVO_2_WRITE(0); 
014B:  CLRF   33
014C:  CALL   108
....................  SERVO_3_WRITE(0); 
014D:  CLRF   33
014E:  CALL   11A
.................... } 

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
