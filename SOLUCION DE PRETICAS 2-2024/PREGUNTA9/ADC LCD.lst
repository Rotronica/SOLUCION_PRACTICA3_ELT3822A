CCS PCM C Compiler, Version 5.015, 5967               15-ene.-25 11:12

               Filename:   E:\AUXILIAR\SEM 2-2024 AUX MICRO\SOLUCION DE PRETICAS 2-2024\PREGUNTA9\ADC LCD.lst

               ROM used:   1358 words (17%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           37 (10%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4B8
0003:  NOP
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 0C,00
0005:  DATA 41,22
0006:  DATA 43,10
0007:  DATA 3D,10
0008:  DATA 25,26
0009:  DATA 64,05
000A:  DATA 00,00
000B:  DATA D6,27
000C:  DATA 4C,2A
000D:  DATA 41,25
000E:  DATA C5,1E
000F:  DATA A0,12
0010:  DATA 31,17
0011:  DATA 33,33
0012:  DATA 00,16
*
00F6:  MOVF   0B,W
00F7:  MOVWF  26
00F8:  BCF    0B.7
00F9:  BSF    03.5
00FA:  BSF    03.6
00FB:  BSF    0C.7
00FC:  BSF    0C.0
00FD:  NOP
00FE:  NOP
00FF:  BCF    03.5
0100:  BCF    03.6
0101:  BTFSC  26.7
0102:  BSF    0B.7
0103:  BSF    03.6
0104:  MOVF   0C,W
0105:  ANDLW  7F
0106:  BTFSC  03.2
0107:  GOTO   14A
0108:  BCF    03.6
0109:  MOVWF  26
010A:  BSF    03.6
010B:  MOVF   0D,W
010C:  BCF    03.6
010D:  MOVWF  27
010E:  BSF    03.6
010F:  MOVF   0F,W
0110:  BCF    03.6
0111:  MOVWF  28
0112:  MOVF   26,W
0113:  MOVWF  33
0114:  CALL   0CA
0115:  MOVF   27,W
0116:  BSF    03.6
0117:  MOVWF  0D
0118:  BCF    03.6
0119:  MOVF   28,W
011A:  BSF    03.6
011B:  MOVWF  0F
011C:  BCF    03.6
011D:  MOVF   0B,W
011E:  MOVWF  29
011F:  BCF    0B.7
0120:  BSF    03.5
0121:  BSF    03.6
0122:  BSF    0C.7
0123:  BSF    0C.0
0124:  NOP
0125:  NOP
0126:  BCF    03.5
0127:  BCF    03.6
0128:  BTFSC  29.7
0129:  BSF    0B.7
012A:  BSF    03.6
012B:  RLF    0C,W
012C:  RLF    0E,W
012D:  ANDLW  7F
012E:  BTFSC  03.2
012F:  GOTO   14A
0130:  BCF    03.6
0131:  MOVWF  26
0132:  BSF    03.6
0133:  MOVF   0D,W
0134:  BCF    03.6
0135:  MOVWF  27
0136:  BSF    03.6
0137:  MOVF   0F,W
0138:  BCF    03.6
0139:  MOVWF  28
013A:  MOVF   26,W
013B:  MOVWF  33
013C:  CALL   0CA
013D:  MOVF   27,W
013E:  BSF    03.6
013F:  MOVWF  0D
0140:  BCF    03.6
0141:  MOVF   28,W
0142:  BSF    03.6
0143:  MOVWF  0F
0144:  INCF   0D,F
0145:  BTFSC  03.2
0146:  INCF   0F,F
0147:  BCF    03.6
0148:  GOTO   0F6
0149:  BSF    03.6
014A:  BCF    03.6
014B:  BCF    0A.3
014C:  BCF    0A.4
014D:  GOTO   4D7 (RETURN)
014E:  MOVLW  8E
014F:  MOVWF  77
0150:  MOVF   27,W
0151:  MOVWF  78
0152:  MOVF   26,W
0153:  MOVWF  79
0154:  CLRF   7A
0155:  MOVF   78,F
0156:  BTFSS  03.2
0157:  GOTO   162
0158:  MOVF   79,W
0159:  MOVWF  78
015A:  CLRF   79
015B:  MOVLW  08
015C:  SUBWF  77,F
015D:  MOVF   78,F
015E:  BTFSS  03.2
015F:  GOTO   162
0160:  CLRF   77
0161:  GOTO   16A
0162:  BCF    03.0
0163:  BTFSC  78.7
0164:  GOTO   169
0165:  RLF    79,F
0166:  RLF    78,F
0167:  DECF   77,F
0168:  GOTO   162
0169:  BCF    78.7
016A:  BCF    0A.3
016B:  BCF    0A.4
016C:  GOTO   4F0 (RETURN)
016D:  MOVF   33,W
016E:  BTFSC  03.2
016F:  GOTO   1DD
0170:  MOVWF  3B
0171:  MOVF   37,W
0172:  BTFSC  03.2
0173:  GOTO   1DD
0174:  ADDWF  3B,F
0175:  BTFSC  03.0
0176:  GOTO   17E
0177:  MOVLW  7F
0178:  SUBWF  3B,F
0179:  BTFSS  03.0
017A:  GOTO   1DD
017B:  BTFSC  03.2
017C:  GOTO   1DD
017D:  GOTO   182
017E:  MOVLW  81
017F:  ADDWF  3B,F
0180:  BTFSC  03.0
0181:  GOTO   1DD
0182:  MOVF   3B,W
0183:  MOVWF  77
0184:  CLRF   78
0185:  CLRF   79
0186:  CLRF   7A
0187:  MOVF   34,W
0188:  MOVWF  3F
0189:  BSF    3F.7
018A:  MOVF   35,W
018B:  MOVWF  3E
018C:  MOVF   36,W
018D:  MOVWF  3D
018E:  MOVLW  18
018F:  MOVWF  3B
0190:  CLRF   3C
0191:  BTFSS  3D.0
0192:  GOTO   1AB
0193:  MOVF   3A,W
0194:  ADDWF  7A,F
0195:  BTFSS  03.0
0196:  GOTO   19D
0197:  INCF   79,F
0198:  BTFSS  03.2
0199:  GOTO   19D
019A:  INCF   78,F
019B:  BTFSC  03.2
019C:  BSF    3C.7
019D:  MOVF   39,W
019E:  ADDWF  79,F
019F:  BTFSS  03.0
01A0:  GOTO   1A4
01A1:  INCF   78,F
01A2:  BTFSC  03.2
01A3:  BSF    3C.7
01A4:  MOVF   38,W
01A5:  MOVWF  35
01A6:  BSF    35.7
01A7:  MOVF   35,W
01A8:  ADDWF  78,F
01A9:  BTFSC  03.0
01AA:  BSF    3C.7
01AB:  RLF    3C,F
01AC:  RRF    78,F
01AD:  RRF    79,F
01AE:  RRF    7A,F
01AF:  RRF    3F,F
01B0:  RRF    3E,F
01B1:  RRF    3D,F
01B2:  BCF    03.0
01B3:  DECFSZ 3B,F
01B4:  GOTO   190
01B5:  MOVLW  01
01B6:  ADDWF  77,F
01B7:  BTFSC  03.0
01B8:  GOTO   1DD
01B9:  BTFSC  78.7
01BA:  GOTO   1C2
01BB:  RLF    3F,F
01BC:  RLF    7A,F
01BD:  RLF    79,F
01BE:  RLF    78,F
01BF:  DECF   77,F
01C0:  BTFSC  03.2
01C1:  GOTO   1DD
01C2:  BTFSS  3F.7
01C3:  GOTO   1D3
01C4:  INCF   7A,F
01C5:  BTFSS  03.2
01C6:  GOTO   1D3
01C7:  INCF   79,F
01C8:  BTFSS  03.2
01C9:  GOTO   1D3
01CA:  INCF   78,F
01CB:  BTFSS  03.2
01CC:  GOTO   1D3
01CD:  RRF    78,F
01CE:  RRF    79,F
01CF:  RRF    7A,F
01D0:  INCF   77,F
01D1:  BTFSC  03.2
01D2:  GOTO   1DD
01D3:  MOVF   34,W
01D4:  MOVWF  3C
01D5:  MOVF   38,W
01D6:  XORWF  3C,F
01D7:  BTFSS  3C.7
01D8:  GOTO   1DB
01D9:  BSF    78.7
01DA:  GOTO   1E1
01DB:  BCF    78.7
01DC:  GOTO   1E1
01DD:  CLRF   77
01DE:  CLRF   78
01DF:  CLRF   79
01E0:  CLRF   7A
01E1:  RETURN
01E2:  MOVF   2A,W
01E3:  BTFSC  03.2
01E4:  GOTO   2A7
01E5:  MOVWF  36
01E6:  MOVF   2E,W
01E7:  BTFSC  03.2
01E8:  GOTO   2A7
01E9:  SUBWF  36,F
01EA:  BTFSS  03.0
01EB:  GOTO   1F1
01EC:  MOVLW  7F
01ED:  ADDWF  36,F
01EE:  BTFSC  03.0
01EF:  GOTO   2A7
01F0:  GOTO   1F7
01F1:  MOVLW  81
01F2:  SUBWF  36,F
01F3:  BTFSS  03.0
01F4:  GOTO   2A7
01F5:  BTFSC  03.2
01F6:  GOTO   2A7
01F7:  MOVF   36,W
01F8:  MOVWF  77
01F9:  CLRF   78
01FA:  CLRF   79
01FB:  CLRF   7A
01FC:  CLRF   35
01FD:  MOVF   2B,W
01FE:  MOVWF  34
01FF:  BSF    34.7
0200:  MOVF   2C,W
0201:  MOVWF  33
0202:  MOVF   2D,W
0203:  MOVWF  32
0204:  MOVLW  19
0205:  MOVWF  36
0206:  MOVF   31,W
0207:  SUBWF  32,F
0208:  BTFSC  03.0
0209:  GOTO   21A
020A:  MOVLW  01
020B:  SUBWF  33,F
020C:  BTFSC  03.0
020D:  GOTO   21A
020E:  SUBWF  34,F
020F:  BTFSC  03.0
0210:  GOTO   21A
0211:  SUBWF  35,F
0212:  BTFSC  03.0
0213:  GOTO   21A
0214:  INCF   35,F
0215:  INCF   34,F
0216:  INCF   33,F
0217:  MOVF   31,W
0218:  ADDWF  32,F
0219:  GOTO   24C
021A:  MOVF   30,W
021B:  SUBWF  33,F
021C:  BTFSC  03.0
021D:  GOTO   235
021E:  MOVLW  01
021F:  SUBWF  34,F
0220:  BTFSC  03.0
0221:  GOTO   235
0222:  SUBWF  35,F
0223:  BTFSC  03.0
0224:  GOTO   235
0225:  INCF   35,F
0226:  INCF   34,F
0227:  MOVF   30,W
0228:  ADDWF  33,F
0229:  MOVF   31,W
022A:  ADDWF  32,F
022B:  BTFSS  03.0
022C:  GOTO   24C
022D:  INCF   33,F
022E:  BTFSS  03.2
022F:  GOTO   24C
0230:  INCF   34,F
0231:  BTFSS  03.2
0232:  GOTO   24C
0233:  INCF   35,F
0234:  GOTO   24C
0235:  MOVF   2F,W
0236:  IORLW  80
0237:  SUBWF  34,F
0238:  BTFSC  03.0
0239:  GOTO   24B
023A:  MOVLW  01
023B:  SUBWF  35,F
023C:  BTFSC  03.0
023D:  GOTO   24B
023E:  INCF   35,F
023F:  MOVF   2F,W
0240:  IORLW  80
0241:  ADDWF  34,F
0242:  MOVF   30,W
0243:  ADDWF  33,F
0244:  BTFSS  03.0
0245:  GOTO   229
0246:  INCF   34,F
0247:  BTFSS  03.2
0248:  GOTO   229
0249:  INCF   35,F
024A:  GOTO   229
024B:  BSF    7A.0
024C:  DECFSZ 36,F
024D:  GOTO   24F
024E:  GOTO   25A
024F:  BCF    03.0
0250:  RLF    32,F
0251:  RLF    33,F
0252:  RLF    34,F
0253:  RLF    35,F
0254:  BCF    03.0
0255:  RLF    7A,F
0256:  RLF    79,F
0257:  RLF    78,F
0258:  RLF    37,F
0259:  GOTO   206
025A:  BTFSS  37.0
025B:  GOTO   262
025C:  BCF    03.0
025D:  RRF    78,F
025E:  RRF    79,F
025F:  RRF    7A,F
0260:  RRF    37,F
0261:  GOTO   265
0262:  DECF   77,F
0263:  BTFSC  03.2
0264:  GOTO   2A7
0265:  BTFSC  37.7
0266:  GOTO   28E
0267:  BCF    03.0
0268:  RLF    32,F
0269:  RLF    33,F
026A:  RLF    34,F
026B:  RLF    35,F
026C:  MOVF   31,W
026D:  SUBWF  32,F
026E:  BTFSC  03.0
026F:  GOTO   27A
0270:  MOVLW  01
0271:  SUBWF  33,F
0272:  BTFSC  03.0
0273:  GOTO   27A
0274:  SUBWF  34,F
0275:  BTFSC  03.0
0276:  GOTO   27A
0277:  SUBWF  35,F
0278:  BTFSS  03.0
0279:  GOTO   29D
027A:  MOVF   30,W
027B:  SUBWF  33,F
027C:  BTFSC  03.0
027D:  GOTO   285
027E:  MOVLW  01
027F:  SUBWF  34,F
0280:  BTFSC  03.0
0281:  GOTO   285
0282:  SUBWF  35,F
0283:  BTFSS  03.0
0284:  GOTO   29D
0285:  MOVF   2F,W
0286:  IORLW  80
0287:  SUBWF  34,F
0288:  BTFSC  03.0
0289:  GOTO   28E
028A:  MOVLW  01
028B:  SUBWF  35,F
028C:  BTFSS  03.0
028D:  GOTO   29D
028E:  INCF   7A,F
028F:  BTFSS  03.2
0290:  GOTO   29D
0291:  INCF   79,F
0292:  BTFSS  03.2
0293:  GOTO   29D
0294:  INCF   78,F
0295:  BTFSS  03.2
0296:  GOTO   29D
0297:  INCF   77,F
0298:  BTFSC  03.2
0299:  GOTO   2A7
029A:  RRF    78,F
029B:  RRF    79,F
029C:  RRF    7A,F
029D:  MOVF   2B,W
029E:  MOVWF  36
029F:  MOVF   2F,W
02A0:  XORWF  36,F
02A1:  BTFSS  36.7
02A2:  GOTO   2A5
02A3:  BSF    78.7
02A4:  GOTO   2AB
02A5:  BCF    78.7
02A6:  GOTO   2AB
02A7:  CLRF   77
02A8:  CLRF   78
02A9:  CLRF   79
02AA:  CLRF   7A
02AB:  BCF    0A.3
02AC:  BCF    0A.4
02AD:  GOTO   515 (RETURN)
02AE:  MOVF   0B,W
02AF:  MOVWF  27
02B0:  BCF    0B.7
02B1:  BSF    03.5
02B2:  BSF    03.6
02B3:  BSF    0C.7
02B4:  BSF    0C.0
02B5:  NOP
02B6:  NOP
02B7:  BCF    03.5
02B8:  BCF    03.6
02B9:  BTFSC  27.7
02BA:  BSF    0B.7
02BB:  BTFSC  03.0
02BC:  GOTO   2E5
02BD:  BSF    03.6
02BE:  MOVF   0C,W
02BF:  ANDLW  7F
02C0:  BCF    03.6
02C1:  MOVWF  27
02C2:  BSF    03.6
02C3:  MOVF   0D,W
02C4:  BCF    03.6
02C5:  MOVWF  28
02C6:  BSF    03.6
02C7:  MOVF   0F,W
02C8:  BCF    03.6
02C9:  MOVWF  29
02CA:  MOVF   27,W
02CB:  MOVWF  33
02CC:  CALL   0CA
02CD:  MOVF   28,W
02CE:  BSF    03.6
02CF:  MOVWF  0D
02D0:  BCF    03.6
02D1:  MOVF   29,W
02D2:  BSF    03.6
02D3:  MOVWF  0F
02D4:  BCF    03.6
02D5:  MOVF   0B,W
02D6:  MOVWF  2A
02D7:  BCF    0B.7
02D8:  BSF    03.5
02D9:  BSF    03.6
02DA:  BSF    0C.7
02DB:  BSF    0C.0
02DC:  NOP
02DD:  NOP
02DE:  BCF    03.5
02DF:  BCF    03.6
02E0:  BTFSC  2A.7
02E1:  BSF    0B.7
02E2:  DECFSZ 26,F
02E3:  GOTO   2E5
02E4:  GOTO   304
02E5:  BSF    03.6
02E6:  RLF    0C,W
02E7:  RLF    0E,W
02E8:  ANDLW  7F
02E9:  BCF    03.6
02EA:  MOVWF  27
02EB:  BSF    03.6
02EC:  MOVF   0D,W
02ED:  BCF    03.6
02EE:  MOVWF  28
02EF:  BSF    03.6
02F0:  MOVF   0F,W
02F1:  BCF    03.6
02F2:  MOVWF  29
02F3:  MOVF   27,W
02F4:  MOVWF  33
02F5:  CALL   0CA
02F6:  MOVF   28,W
02F7:  BSF    03.6
02F8:  MOVWF  0D
02F9:  BCF    03.6
02FA:  MOVF   29,W
02FB:  BSF    03.6
02FC:  MOVWF  0F
02FD:  INCF   0D,F
02FE:  BTFSC  03.2
02FF:  INCF   0F,F
0300:  BCF    03.0
0301:  BCF    03.6
0302:  DECFSZ 26,F
0303:  GOTO   2AE
0304:  RETURN
0305:  CLRF   2E
0306:  MOVF   04,W
0307:  MOVWF  2D
0308:  BCF    2E.0
0309:  BTFSC  03.7
030A:  BSF    2E.0
030B:  BTFSS  27.7
030C:  GOTO   315
030D:  BSF    2D.7
030E:  BTFSS  2D.4
030F:  INCF   2D,F
0310:  COMF   26,F
0311:  COMF   27,F
0312:  INCF   26,F
0313:  BTFSC  03.2
0314:  INCF   27,F
0315:  SWAPF  27,W
0316:  IORLW  F0
0317:  MOVWF  29
0318:  ADDWF  29,F
0319:  ADDLW  E2
031A:  MOVWF  2A
031B:  ADDLW  32
031C:  MOVWF  2C
031D:  MOVF   27,W
031E:  ANDLW  0F
031F:  ADDWF  2A,F
0320:  ADDWF  2A,F
0321:  ADDWF  2C,F
0322:  ADDLW  E9
0323:  MOVWF  2B
0324:  ADDWF  2B,F
0325:  ADDWF  2B,F
0326:  SWAPF  26,W
0327:  ANDLW  0F
0328:  ADDWF  2B,F
0329:  ADDWF  2C,F
032A:  RLF    2B,F
032B:  RLF    2C,F
032C:  COMF   2C,F
032D:  RLF    2C,F
032E:  MOVF   26,W
032F:  ANDLW  0F
0330:  ADDWF  2C,F
0331:  RLF    29,F
0332:  MOVLW  07
0333:  MOVWF  28
0334:  MOVLW  0A
0335:  ADDWF  2C,F
0336:  DECF   2B,F
0337:  BTFSS  03.0
0338:  GOTO   335
0339:  ADDWF  2B,F
033A:  DECF   2A,F
033B:  BTFSS  03.0
033C:  GOTO   339
033D:  ADDWF  2A,F
033E:  DECF   29,F
033F:  BTFSS  03.0
0340:  GOTO   33D
0341:  ADDWF  29,F
0342:  DECF   28,F
0343:  BTFSS  03.0
0344:  GOTO   341
0345:  MOVLW  28
0346:  MOVWF  04
0347:  BCF    03.7
0348:  MOVLW  07
0349:  ANDWF  2D,W
034A:  BCF    2D.6
034B:  DECF   04,F
034C:  ANDWF  2D,W
034D:  BTFSS  03.2
034E:  GOTO   356
034F:  BTFSC  2D.4
0350:  INCF   04,F
0351:  BTFSC  2D.4
0352:  GOTO   356
0353:  MOVLW  20
0354:  MOVWF  77
0355:  GOTO   373
0356:  ADDWF  04,F
0357:  MOVLW  2C
0358:  SUBWF  04,W
0359:  BTFSC  03.2
035A:  BSF    2D.6
035B:  MOVF   00,W
035C:  MOVWF  77
035D:  BTFSS  03.2
035E:  GOTO   367
035F:  BTFSC  2D.6
0360:  GOTO   367
0361:  BTFSC  2D.4
0362:  GOTO   381
0363:  BTFSC  2D.3
0364:  GOTO   367
0365:  MOVLW  20
0366:  GOTO   372
0367:  BTFSS  2D.7
0368:  GOTO   36F
0369:  MOVLW  2D
036A:  MOVWF  77
036B:  DECF   04,F
036C:  BCF    2D.6
036D:  BCF    2D.7
036E:  GOTO   373
036F:  BSF    2D.3
0370:  BCF    2D.4
0371:  MOVLW  30
0372:  ADDWF  77,F
0373:  CLRF   27
0374:  MOVF   04,W
0375:  MOVWF  26
0376:  BCF    27.0
0377:  BTFSC  03.7
0378:  BSF    27.0
0379:  MOVF   77,W
037A:  MOVWF  33
037B:  CALL   0CA
037C:  MOVF   26,W
037D:  MOVWF  04
037E:  BCF    03.7
037F:  BTFSC  27.0
0380:  BSF    03.7
0381:  INCF   04,F
0382:  BTFSS  2D.6
0383:  GOTO   357
0384:  BCF    0A.3
0385:  BCF    0A.4
0386:  GOTO   532 (RETURN)
0387:  BTFSC  03.1
0388:  GOTO   38C
0389:  MOVLW  3B
038A:  MOVWF  04
038B:  BCF    03.7
038C:  CLRF   77
038D:  CLRF   78
038E:  CLRF   79
038F:  CLRF   7A
0390:  CLRF   3B
0391:  CLRF   3C
0392:  CLRF   3D
0393:  CLRF   3E
0394:  MOVF   3A,W
0395:  IORWF  39,W
0396:  IORWF  38,W
0397:  IORWF  37,W
0398:  BTFSC  03.2
0399:  GOTO   3CA
039A:  MOVLW  20
039B:  MOVWF  3F
039C:  BCF    03.0
039D:  RLF    33,F
039E:  RLF    34,F
039F:  RLF    35,F
03A0:  RLF    36,F
03A1:  RLF    3B,F
03A2:  RLF    3C,F
03A3:  RLF    3D,F
03A4:  RLF    3E,F
03A5:  MOVF   3A,W
03A6:  SUBWF  3E,W
03A7:  BTFSS  03.2
03A8:  GOTO   3B3
03A9:  MOVF   39,W
03AA:  SUBWF  3D,W
03AB:  BTFSS  03.2
03AC:  GOTO   3B3
03AD:  MOVF   38,W
03AE:  SUBWF  3C,W
03AF:  BTFSS  03.2
03B0:  GOTO   3B3
03B1:  MOVF   37,W
03B2:  SUBWF  3B,W
03B3:  BTFSS  03.0
03B4:  GOTO   3C4
03B5:  MOVF   37,W
03B6:  SUBWF  3B,F
03B7:  MOVF   38,W
03B8:  BTFSS  03.0
03B9:  INCFSZ 38,W
03BA:  SUBWF  3C,F
03BB:  MOVF   39,W
03BC:  BTFSS  03.0
03BD:  INCFSZ 39,W
03BE:  SUBWF  3D,F
03BF:  MOVF   3A,W
03C0:  BTFSS  03.0
03C1:  INCFSZ 3A,W
03C2:  SUBWF  3E,F
03C3:  BSF    03.0
03C4:  RLF    77,F
03C5:  RLF    78,F
03C6:  RLF    79,F
03C7:  RLF    7A,F
03C8:  DECFSZ 3F,F
03C9:  GOTO   39C
03CA:  MOVF   3B,W
03CB:  MOVWF  00
03CC:  INCF   04,F
03CD:  MOVF   3C,W
03CE:  MOVWF  00
03CF:  INCF   04,F
03D0:  MOVF   3D,W
03D1:  MOVWF  00
03D2:  INCF   04,F
03D3:  MOVF   3E,W
03D4:  MOVWF  00
03D5:  RETURN
03D6:  MOVF   04,W
03D7:  MOVWF  2B
03D8:  MOVF   2A,W
03D9:  MOVWF  2D
03DA:  BTFSC  03.2
03DB:  GOTO   3F5
03DC:  MOVF   29,W
03DD:  MOVWF  36
03DE:  MOVF   28,W
03DF:  MOVWF  35
03E0:  MOVF   27,W
03E1:  MOVWF  34
03E2:  MOVF   26,W
03E3:  MOVWF  33
03E4:  CLRF   3A
03E5:  CLRF   39
03E6:  MOVLW  20
03E7:  MOVWF  38
03E8:  MOVLW  82
03E9:  MOVWF  37
03EA:  CALL   16D
03EB:  MOVF   7A,W
03EC:  MOVWF  29
03ED:  MOVF   79,W
03EE:  MOVWF  28
03EF:  MOVF   78,W
03F0:  MOVWF  27
03F1:  MOVF   77,W
03F2:  MOVWF  26
03F3:  DECFSZ 2D,F
03F4:  GOTO   3DC
03F5:  MOVF   29,W
03F6:  MOVWF  36
03F7:  MOVF   28,W
03F8:  MOVWF  35
03F9:  MOVF   27,W
03FA:  MOVWF  34
03FB:  MOVF   26,W
03FC:  MOVWF  33
03FD:  MOVF   33,W
03FE:  SUBLW  B6
03FF:  MOVWF  33
0400:  CLRF   7A
0401:  MOVF   34,W
0402:  MOVWF  37
0403:  BSF    34.7
0404:  BCF    03.0
0405:  RRF    34,F
0406:  RRF    35,F
0407:  RRF    36,F
0408:  RRF    7A,F
0409:  RRF    79,F
040A:  RRF    78,F
040B:  RRF    77,F
040C:  DECFSZ 33,F
040D:  GOTO   404
040E:  BTFSS  37.7
040F:  GOTO   41B
0410:  COMF   77,F
0411:  COMF   78,F
0412:  COMF   79,F
0413:  COMF   7A,F
0414:  INCF   77,F
0415:  BTFSC  03.2
0416:  INCF   78,F
0417:  BTFSC  03.2
0418:  INCF   79,F
0419:  BTFSC  03.2
041A:  INCF   7A,F
041B:  MOVF   7A,W
041C:  MOVWF  29
041D:  MOVF   79,W
041E:  MOVWF  28
041F:  MOVF   78,W
0420:  MOVWF  27
0421:  MOVF   77,W
0422:  MOVWF  26
0423:  BTFSS  29.7
0424:  GOTO   432
0425:  DECF   2B,F
0426:  BSF    2B.5
0427:  COMF   26,F
0428:  COMF   27,F
0429:  COMF   28,F
042A:  COMF   29,F
042B:  INCF   26,F
042C:  BTFSC  03.2
042D:  INCF   27,F
042E:  BTFSC  03.2
042F:  INCF   28,F
0430:  BTFSC  03.2
0431:  INCF   29,F
0432:  MOVLW  3B
0433:  MOVWF  32
0434:  MOVLW  9A
0435:  MOVWF  31
0436:  MOVLW  CA
0437:  MOVWF  30
0438:  CLRF   2F
0439:  MOVLW  0A
043A:  MOVWF  2D
043B:  MOVF   2A,W
043C:  BTFSC  03.2
043D:  INCF   2B,F
043E:  BSF    03.1
043F:  MOVLW  26
0440:  MOVWF  04
0441:  BCF    03.7
0442:  MOVF   29,W
0443:  MOVWF  36
0444:  MOVF   28,W
0445:  MOVWF  35
0446:  MOVF   27,W
0447:  MOVWF  34
0448:  MOVF   26,W
0449:  MOVWF  33
044A:  MOVF   32,W
044B:  MOVWF  3A
044C:  MOVF   31,W
044D:  MOVWF  39
044E:  MOVF   30,W
044F:  MOVWF  38
0450:  MOVF   2F,W
0451:  MOVWF  37
0452:  CALL   387
0453:  MOVF   78,W
0454:  MOVF   77,F
0455:  BTFSS  03.2
0456:  GOTO   46A
0457:  INCF   2A,W
0458:  SUBWF  2D,W
0459:  BTFSC  03.2
045A:  GOTO   46A
045B:  MOVF   2B,W
045C:  BTFSC  03.2
045D:  GOTO   46C
045E:  ANDLW  0F
045F:  SUBWF  2D,W
0460:  BTFSC  03.2
0461:  GOTO   464
0462:  BTFSC  03.0
0463:  GOTO   49C
0464:  BTFSC  2B.7
0465:  GOTO   49C
0466:  BTFSC  2B.6
0467:  GOTO   46C
0468:  MOVLW  20
0469:  GOTO   498
046A:  MOVLW  20
046B:  ANDWF  2B,F
046C:  BTFSS  2B.5
046D:  GOTO   47A
046E:  BCF    2B.5
046F:  MOVF   2A,W
0470:  BTFSS  03.2
0471:  DECF   2B,F
0472:  MOVF   77,W
0473:  MOVWF  2B
0474:  MOVLW  2D
0475:  MOVWF  33
0476:  CALL   0CA
0477:  MOVF   2B,W
0478:  MOVWF  77
0479:  CLRF   2B
047A:  MOVF   2A,W
047B:  SUBWF  2D,W
047C:  BTFSS  03.2
047D:  GOTO   488
047E:  MOVF   77,W
047F:  MOVWF  2B
0480:  MOVLW  2E
0481:  MOVWF  33
0482:  CALL   0CA
0483:  MOVF   2B,W
0484:  MOVWF  77
0485:  MOVLW  20
0486:  ANDWF  2B,F
0487:  MOVLW  00
0488:  MOVLW  30
0489:  BTFSS  2B.5
048A:  GOTO   498
048B:  BCF    2B.5
048C:  MOVF   2A,W
048D:  BTFSS  03.2
048E:  DECF   2B,F
048F:  MOVF   77,W
0490:  MOVWF  2B
0491:  MOVLW  2D
0492:  MOVWF  33
0493:  CALL   0CA
0494:  MOVF   2B,W
0495:  MOVWF  77
0496:  CLRF   2B
0497:  MOVLW  30
0498:  ADDWF  77,F
0499:  MOVF   77,W
049A:  MOVWF  33
049B:  CALL   0CA
049C:  BCF    03.1
049D:  MOVF   32,W
049E:  MOVWF  36
049F:  MOVF   31,W
04A0:  MOVWF  35
04A1:  MOVF   30,W
04A2:  MOVWF  34
04A3:  MOVF   2F,W
04A4:  MOVWF  33
04A5:  CLRF   3A
04A6:  CLRF   39
04A7:  CLRF   38
04A8:  MOVLW  0A
04A9:  MOVWF  37
04AA:  CALL   387
04AB:  MOVF   7A,W
04AC:  MOVWF  32
04AD:  MOVF   79,W
04AE:  MOVWF  31
04AF:  MOVF   78,W
04B0:  MOVWF  30
04B1:  MOVF   77,W
04B2:  MOVWF  2F
04B3:  DECFSZ 2D,F
04B4:  GOTO   43E
04B5:  BCF    0A.3
04B6:  BCF    0A.4
04B7:  GOTO   54C (RETURN)
....................  
.................... #list 
....................  
.................... #fuses xt, nowdt, put, noprotect 
.................... #device adc=10 
.................... #use delay(clock=4M) 
*
0013:  MOVLW  34
0014:  MOVWF  04
0015:  BCF    03.7
0016:  MOVF   00,W
0017:  BTFSC  03.2
0018:  GOTO   027
0019:  MOVLW  01
001A:  MOVWF  78
001B:  CLRF   77
001C:  DECFSZ 77,F
001D:  GOTO   01C
001E:  DECFSZ 78,F
001F:  GOTO   01B
0020:  MOVLW  4A
0021:  MOVWF  77
0022:  DECFSZ 77,F
0023:  GOTO   022
0024:  GOTO   025
0025:  DECFSZ 00,F
0026:  GOTO   019
0027:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0040:  MOVLW  0F
0041:  BSF    03.5
0042:  ANDWF  08,W
0043:  IORLW  F0
0044:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0045:  BCF    03.5
0046:  BSF    08.2
....................    delay_cycles(1); 
0047:  NOP
....................    lcd_output_enable(1); 
0048:  BSF    08.0
....................    delay_cycles(1); 
0049:  NOP
....................    high = lcd_read_nibble(); 
004A:  CALL   034
004B:  MOVF   78,W
004C:  MOVWF  3B
....................        
....................    lcd_output_enable(0); 
004D:  BCF    08.0
....................    delay_cycles(1); 
004E:  NOP
....................    lcd_output_enable(1); 
004F:  BSF    08.0
....................    delay_us(1); 
0050:  NOP
....................    low = lcd_read_nibble(); 
0051:  CALL   034
0052:  MOVF   78,W
0053:  MOVWF  3A
....................        
....................    lcd_output_enable(0); 
0054:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0055:  MOVLW  0F
0056:  BSF    03.5
0057:  ANDWF  08,W
0058:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0059:  BCF    03.5
005A:  SWAPF  3B,W
005B:  MOVWF  77
005C:  MOVLW  F0
005D:  ANDWF  77,F
005E:  MOVF   77,W
005F:  IORWF  3A,W
0060:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0034:  MOVF   08,W
0035:  MOVWF  77
0036:  SWAPF  08,W
0037:  ANDLW  0F
0038:  MOVWF  78
....................   #endif 
0039:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0028:  SWAPF  3B,W
0029:  ANDLW  F0
002A:  MOVWF  77
002B:  MOVLW  0F
002C:  ANDWF  08,W
002D:  IORWF  77,W
002E:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
002F:  NOP
....................    lcd_output_enable(1); 
0030:  BSF    08.0
....................    delay_us(2); 
0031:  GOTO   032
....................    lcd_output_enable(0); 
0032:  BCF    08.0
0033:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
003A:  BSF    03.5
003B:  BCF    08.0
....................    lcd_rs_tris(); 
003C:  BCF    08.1
....................    lcd_rw_tris(); 
003D:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
003E:  BCF    03.5
003F:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0061:  MOVF   78,W
0062:  MOVWF  3A
0063:  BTFSC  3A.7
0064:  GOTO   040
....................    lcd_output_rs(address); 
0065:  BTFSS  38.0
0066:  BCF    08.1
0067:  BTFSC  38.0
0068:  BSF    08.1
....................    delay_cycles(1); 
0069:  NOP
....................    lcd_output_rw(0); 
006A:  BCF    08.2
....................    delay_cycles(1); 
006B:  NOP
....................    lcd_output_enable(0); 
006C:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
006D:  SWAPF  39,W
006E:  MOVWF  3A
006F:  MOVLW  0F
0070:  ANDWF  3A,F
0071:  MOVF   3A,W
0072:  MOVWF  3B
0073:  CALL   028
....................    lcd_send_nibble(n & 0xf); 
0074:  MOVF   39,W
0075:  ANDLW  0F
0076:  MOVWF  3A
0077:  MOVWF  3B
0078:  CALL   028
0079:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
007A:  MOVLW  28
007B:  MOVWF  27
007C:  MOVLW  0C
007D:  MOVWF  28
007E:  MOVLW  01
007F:  MOVWF  29
0080:  MOVLW  06
0081:  MOVWF  2A
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0082:  BCF    08.0
....................    lcd_output_rs(0); 
0083:  BCF    08.1
....................    lcd_output_rw(0); 
0084:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0085:  MOVLW  0F
0086:  BSF    03.5
0087:  ANDWF  08,W
0088:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0089:  BCF    08.0
....................    lcd_rs_tris(); 
008A:  BCF    08.1
....................    lcd_rw_tris(); 
008B:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
008C:  MOVLW  0F
008D:  BCF    03.5
008E:  MOVWF  34
008F:  CALL   013
....................    for(i=1;i<=3;++i) 
0090:  MOVLW  01
0091:  MOVWF  26
0092:  MOVF   26,W
0093:  SUBLW  03
0094:  BTFSS  03.0
0095:  GOTO   09E
....................    { 
....................        lcd_send_nibble(3); 
0096:  MOVLW  03
0097:  MOVWF  3B
0098:  CALL   028
....................        delay_ms(5); 
0099:  MOVLW  05
009A:  MOVWF  34
009B:  CALL   013
009C:  INCF   26,F
009D:  GOTO   092
....................    } 
....................     
....................    lcd_send_nibble(2); 
009E:  MOVLW  02
009F:  MOVWF  3B
00A0:  CALL   028
....................    delay_ms(5); 
00A1:  MOVLW  05
00A2:  MOVWF  34
00A3:  CALL   013
....................    for(i=0;i<=3;++i) 
00A4:  CLRF   26
00A5:  MOVF   26,W
00A6:  SUBLW  03
00A7:  BTFSS  03.0
00A8:  GOTO   0B5
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A9:  MOVLW  27
00AA:  ADDWF  26,W
00AB:  MOVWF  04
00AC:  BCF    03.7
00AD:  MOVF   00,W
00AE:  MOVWF  2B
00AF:  CLRF   38
00B0:  MOVF   2B,W
00B1:  MOVWF  39
00B2:  CALL   03A
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B3:  INCF   26,F
00B4:  GOTO   0A5
00B5:  BCF    0A.3
00B6:  BCF    0A.4
00B7:  GOTO   4D0 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00B8:  DECFSZ 35,W
00B9:  GOTO   0BB
00BA:  GOTO   0BE
....................       address=LCD_LINE_TWO; 
00BB:  MOVLW  40
00BC:  MOVWF  36
00BD:  GOTO   0BF
....................    else 
....................       address=0; 
00BE:  CLRF   36
....................       
....................    address+=x-1; 
00BF:  MOVLW  01
00C0:  SUBWF  34,W
00C1:  ADDWF  36,F
....................    lcd_send_byte(0,0x80|address); 
00C2:  MOVF   36,W
00C3:  IORLW  80
00C4:  MOVWF  37
00C5:  CLRF   38
00C6:  MOVF   37,W
00C7:  MOVWF  39
00C8:  CALL   03A
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C9:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00CA:  MOVF   33,W
00CB:  XORLW  07
00CC:  BTFSC  03.2
00CD:  GOTO   0D8
00CE:  XORLW  0B
00CF:  BTFSC  03.2
00D0:  GOTO   0DD
00D1:  XORLW  06
00D2:  BTFSC  03.2
00D3:  GOTO   0E5
00D4:  XORLW  02
00D5:  BTFSC  03.2
00D6:  GOTO   0EB
00D7:  GOTO   0F0
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00D8:  MOVLW  01
00D9:  MOVWF  34
00DA:  MOVWF  35
00DB:  CALL   0B8
00DC:  GOTO   0F5
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00DD:  CLRF   38
00DE:  MOVLW  01
00DF:  MOVWF  39
00E0:  CALL   03A
....................                      delay_ms(2); 
00E1:  MOVLW  02
00E2:  MOVWF  34
00E3:  CALL   013
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00E4:  GOTO   0F5
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00E5:  MOVLW  01
00E6:  MOVWF  34
00E7:  MOVLW  02
00E8:  MOVWF  35
00E9:  CALL   0B8
00EA:  GOTO   0F5
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00EB:  CLRF   38
00EC:  MOVLW  10
00ED:  MOVWF  39
00EE:  CALL   03A
00EF:  GOTO   0F5
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00F0:  MOVLW  01
00F1:  MOVWF  38
00F2:  MOVF   33,W
00F3:  MOVWF  39
00F4:  CALL   03A
....................      #endif 
....................    } 
00F5:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... long q; 
.................... float p; 
.................... void main(){ 
*
04B8:  MOVF   03,W
04B9:  ANDLW  1F
04BA:  MOVWF  03
04BB:  BSF    03.5
04BC:  BSF    1F.0
04BD:  BSF    1F.1
04BE:  BSF    1F.2
04BF:  BCF    1F.3
04C0:  MOVLW  07
04C1:  MOVWF  1C
04C2:  BCF    03.7
.................... setup_adc_ports(AN0); 
04C3:  BCF    1F.0
04C4:  BSF    1F.1
04C5:  BSF    1F.2
04C6:  BSF    1F.3
.................... setup_adc(ADC_CLOCK_INTERNAL); 
04C7:  BCF    1F.6
04C8:  BCF    03.5
04C9:  BSF    1F.6
04CA:  BSF    1F.7
04CB:  BSF    03.5
04CC:  BSF    1F.7
04CD:  BCF    03.5
04CE:  BSF    1F.0
.................... lcd_init(); 
04CF:  GOTO   07A
.................... lcd_putc("\f"); 
04D0:  MOVLW  04
04D1:  BSF    03.6
04D2:  MOVWF  0D
04D3:  MOVLW  00
04D4:  MOVWF  0F
04D5:  BCF    03.6
04D6:  GOTO   0F6
....................  while(true){ 
....................   set_adc_channel(0); 
04D7:  MOVLW  00
04D8:  MOVWF  78
04D9:  MOVF   1F,W
04DA:  ANDLW  C7
04DB:  IORWF  78,W
04DC:  MOVWF  1F
....................   delay_us(20); 
04DD:  MOVLW  06
04DE:  MOVWF  77
04DF:  DECFSZ 77,F
04E0:  GOTO   4DF
04E1:  NOP
....................   q=read_adc(); 
04E2:  BSF    1F.2
04E3:  BTFSC  1F.2
04E4:  GOTO   4E3
04E5:  BSF    03.5
04E6:  MOVF   1E,W
04E7:  BCF    03.5
04E8:  MOVWF  20
04E9:  MOVF   1E,W
04EA:  MOVWF  21
....................   p=(5.0*q)/1024; 
04EB:  MOVF   21,W
04EC:  MOVWF  27
04ED:  MOVF   20,W
04EE:  MOVWF  26
04EF:  GOTO   14E
04F0:  CLRF   36
04F1:  CLRF   35
04F2:  MOVLW  20
04F3:  MOVWF  34
04F4:  MOVLW  81
04F5:  MOVWF  33
04F6:  MOVF   7A,W
04F7:  MOVWF  3A
04F8:  MOVF   79,W
04F9:  MOVWF  39
04FA:  MOVF   78,W
04FB:  MOVWF  38
04FC:  MOVF   77,W
04FD:  MOVWF  37
04FE:  CALL   16D
04FF:  MOVF   7A,W
0500:  MOVWF  29
0501:  MOVF   79,W
0502:  MOVWF  28
0503:  MOVF   78,W
0504:  MOVWF  27
0505:  MOVF   77,W
0506:  MOVWF  26
0507:  MOVF   7A,W
0508:  MOVWF  2D
0509:  MOVF   79,W
050A:  MOVWF  2C
050B:  MOVF   78,W
050C:  MOVWF  2B
050D:  MOVF   77,W
050E:  MOVWF  2A
050F:  CLRF   31
0510:  CLRF   30
0511:  CLRF   2F
0512:  MOVLW  89
0513:  MOVWF  2E
0514:  GOTO   1E2
0515:  MOVF   7A,W
0516:  MOVWF  25
0517:  MOVF   79,W
0518:  MOVWF  24
0519:  MOVF   78,W
051A:  MOVWF  23
051B:  MOVF   77,W
051C:  MOVWF  22
....................   lcd_gotoxy(1,1); 
051D:  MOVLW  01
051E:  MOVWF  34
051F:  MOVWF  35
0520:  CALL   0B8
....................   printf(lcd_putc,"ADC = %Ld\n",q); 
0521:  MOVLW  05
0522:  BSF    03.6
0523:  MOVWF  0D
0524:  MOVLW  00
0525:  MOVWF  0F
0526:  BCF    03.0
0527:  MOVLW  06
0528:  BCF    03.6
0529:  MOVWF  26
052A:  CALL   2AE
052B:  MOVLW  10
052C:  MOVWF  04
052D:  MOVF   21,W
052E:  MOVWF  27
052F:  MOVF   20,W
0530:  MOVWF  26
0531:  GOTO   305
0532:  MOVLW  0A
0533:  MOVWF  33
0534:  CALL   0CA
....................   printf(lcd_putc,"VOLTAJE= %1.3f",p); 
0535:  MOVLW  0B
0536:  BSF    03.6
0537:  MOVWF  0D
0538:  MOVLW  00
0539:  MOVWF  0F
053A:  BCF    03.0
053B:  MOVLW  09
053C:  BCF    03.6
053D:  MOVWF  26
053E:  CALL   2AE
053F:  MOVLW  89
0540:  MOVWF  04
0541:  MOVF   25,W
0542:  MOVWF  29
0543:  MOVF   24,W
0544:  MOVWF  28
0545:  MOVF   23,W
0546:  MOVWF  27
0547:  MOVF   22,W
0548:  MOVWF  26
0549:  MOVLW  03
054A:  MOVWF  2A
054B:  GOTO   3D6
054C:  GOTO   4D7
....................  } 
.................... } 
054D:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
